Minimal Scheme Implementation for use as an Extension Language

Download: [http://synthcode.com/scheme/chibi-scheme-0.2.tgz version 0.2]

Chibi-Scheme is a very small but mostly complete R5RS Scheme
implementation using a reasonably fast custom VM.  Chibi-Scheme tries
as much as possible not to trade its small size by cutting corners,
and provides full continuations, both low and high-level hygienic
macros based on syntactic-closures, string ports and exceptions.
Chibi-Scheme is written in highly portable C and supports multiple
VM instances to run simultaneously.

To build, just run "make".  This will provide a shared library
"libchibi-scheme", as well as a sample "chibi-scheme" command-line
repl.  The "chibi-scheme-static" make target builds an equivalent
static executable.  Use "make install" to install, and "make
uninstall" if you change your mind and decide you can't spare the 100k
of disk space.

You can edit the file config.h for a number of settings, mostly
disabling features to make the executable smaller.  You can specify
standard options directly as arguments to make, for example

  make CFLAGS=-Os

to optimize for size, or

  make LDFLAGS=-L/usr/local/lib CPPFLAGS=-I/usr/local/include

to compile against a library installed in /usr/local.

By default Chibi uses a custom, precise, non-moving GC.  You can link
against the Boehm conservative GC by editing the config file, or
directly from make with:

  make USE_BOEHM=1

See the file main.c for an example of using chibi-scheme as a library.
More detailed documentation will be available in an upcoming release,
for now the essential functions to remember are:

  /* create a new context */
  sexp_make_context(NULL, NULL, NULL)
  
  /* evaluates an s-expression */
  sexp_eval(context, expr)
  
  /* reads an s-expression from str and evaluates it */
  sexp_eval_string(context, str)

