#! /usr/local/bin/csi -script

(import extras ports)
(require-extension
 srfi-1 files regex posix data-structures
 hato-uri hato-config hato-http html-parser
 wiki-parse wiki-write wiki-utils)

(define (get-timestamp file)
  (let* ((mtime-file (pathname-replace-extension file ".ctime"))
         (mtime (and (file-exists? mtime-file)
                     (call-with-input-file mtime-file read))))
    (if (number? mtime)
        mtime
        (let ((mtime (file-modification-time file)))
          (call-with-output-file mtime-file (lambda (out) (write mtime out)))
          mtime))))

(define (display-prefix title mtime)
  (display "<?xml version=\"1.0\" encoding=\"UTF-8\" ?>
<rss version=\"2.0\">
<channel>
<title>")
  (display title)
  (display "</title>
<link>http://synthcode.com/blog/</link>
<pubDate>")
  (cond (mtime (display (seconds->string mtime))))
  (display "</pubDate>
<lastBuildDate>")
  (cond (mtime (display (seconds->string mtime))))
  (display "</lastBuildDate>\n"))

(define (get-newest-mtime config wdir)
  (let ((bdir (string-append wdir "/blog/")))
    (let lp1 ((years (sort (filter-map string->number (directory bdir)) >)))
      (cond
       ((null? years)
        0)
       (else
        (let* ((year (car years))
               (ydir (string-append bdir (number->string year))))
          (let lp2 ((months
                     (sort (filter-map string->number (directory ydir)) >)))
            (cond
             ((null? months)
              (lp1 (cdr years)))
             (else
              (let* ((month (car months))
                     (mdir (string-append ydir "/" (if (< month 10) "0" "")
                                          (number->string month)))
                     (days
                      (sort
                       (map get-timestamp
                            (filter
                             (lambda (f) (equal? "wiki" (pathname-extension f)))
                             (map (lambda (f) (string-append mdir "/" f))
                                  (directory mdir))))
                       >)))
                (if (null? days)
                    (lp2 (cdr months))
                    (car days))))))))))))

(define (display-summary config wdir)
  (let ((bdir (string-append wdir "/blog/")))
    (for-each
     (lambda (year)
       (let ((ydir (string-append bdir (number->string year))))
         (for-each
          (lambda (month)
            (let ((mdir (string-append ydir "/" (if (< month 10) "0" "")
                                       (number->string month))))
              (for-each
               (lambda (f)
                 (let ((path (string-append "/blog/"
                                            (number->string year)
                                            "/"
                                            (if (< month 10) "0" "")
                                            (number->string month)
                                            "/"
                                            (pathname-strip-extension f))))
                   (display "<item>\n<title>")
                   (display (wiki-word-display (pathname-strip-extension f)))
                   (display "</title>\n<link>http://synthcode.com")
                   (display path)
                   (display "</link>\n<pubDate>")
                   (display (seconds->string
                             (get-timestamp (string-append wdir path ".wiki"))))
                   (display "</pubDate>\n</item>\n\n")))
               (sort (filter (lambda (f) (equal? "wiki" (pathname-extension f)))
                             (directory mdir))
                     (lambda (f1 f2)
                       (> (get-timestamp (string-append mdir "/" f1))
                          (get-timestamp (string-append mdir "/" f2))
                          ))))))
          (sort (filter-map string->number (directory ydir)) >))))
     (sort (filter-map string->number (directory bdir)) >))))

(define (display-suffix)
  (display "</channel>\n</rss>\n"))

;; XXXX add filtering on tags
(define (handle path uri headers config)
  (let* ((params (http-parse-form uri headers))
         (wdir (conf-get config 'wiki-root "www/docs/wiki/"))
         (cache-file (string-append wdir "/blog/feed.cache"))
         (cache-mtime (and (file-exists? cache-file)
                           (get-timestamp cache-file)))
         (new-mtime (get-newest-mtime config wdir)))
    (cond
     ((or (not cache-mtime) (< cache-mtime new-mtime))
      (with-output-to-file cache-file
        (lambda ()
          (display-prefix "synthcode blog" (current-seconds))
          (display-summary config wdir)
          (display-suffix)))))
    (let ((rss (with-input-from-file cache-file read-string)))
      (display rss))))

