#! /usr/local/bin/csi -script

(import extras ports)
(require-extension
 srfi-1 files regex posix data-structures
 hato-uri hato-config hato-http html-parser
 wiki-parse wiki-write wiki-utils)

(define (get-timestamp file)
  (let* ((mtime-file (pathname-replace-extension file ".ctime"))
         (mtime (and (file-exists? mtime-file)
                     (call-with-input-file mtime-file read))))
    (if (number? mtime)
        mtime
        (let ((mtime (file-modification-time file)))
          (call-with-output-file mtime-file (lambda (out) (write mtime out)))
          mtime))))

(define (display-timestamp mtime)
  (display "<small>posted by <a href=\"/wiki/users:foof\">foof</a> on ")
  (display (seconds->string mtime))
  (display "</small>\n"))

(define (display-prefix title mtime)
  (display "<html>\n<head>\n<title>")
  (display title)
  (display "</title>
<link rel=\"stylesheet\" href=\"/css/default.css\" type=\"text/css\" />
<link rel=\"alternate\" type=\"application/rss+xml\" title=\"synthcode blog\" href=\"/feed.xscm\" />
<script type=\"text/javascript\" src=\"/js/utils.js\"></script>
</head>
<body>
<div id=\"header\">
<b>")
  (display title)
  (display "</b><br />\n")
  (cond (mtime (display-timestamp mtime)))
  (display "</div>

<div id=\"search\">
<form action=\"http://www.google.com/search\">
<input type=\"text\" name=\"q\" value=\"search...\" onfocus=\"javascript:if (this.value == 'search...') {this.value=''}\" />
<input type=\"hidden\" name=\"domains\" value=\"synthcode.com\" />
<input type=\"hidden\" name=\"sitesearch\" value=\"synthcode.com\" />
</form>
<small><a href=\"/blog/\">blog</a> <a href=\"/feed.xscm\">feed</a></small>
</div>

<div id=\"main\">
"))

(define (display-summary config wdir)
  (let ((bdir (string-append wdir "/blog/"))
        (par 1))
    (for-each
     (lambda (year)
       (let ((ydir (string-append bdir (number->string year))))
         (for-each
          (lambda (month)
            (let ((mdir (string-append ydir "/" (if (< month 10) "0" "")
                                       (number->string month))))
              (for-each
               (lambda (f)
                 (let ((path (string-append "/blog/"
                                            (number->string year)
                                            "/"
                                            (if (< month 10) "0" "")
                                            (number->string month)
                                            "/"
                                            (pathname-strip-extension f))))
                   (wiki-write
                    `((p (a (@ (href ,path))
                            ,(wiki-word-display
                              (pathname-strip-extension f)))
                         (br)
                         (small
                          "posted by "
                          (a (@ (href "/wiki/users:foof")) "foof")
                          " on "
                          ,(seconds->string
                            (get-timestamp
                             (string-append mdir "/" f))))
                         ,(car (get-sxml wdir
                                         config
                                         (string-append mdir "/" f)))
                         (a (@ (href ,path)) "[Read more...]")))
                    par)
                   (set! par (+ par 1))))
               (sort (filter (lambda (f) (equal? "wiki" (pathname-extension f)))
                             (directory mdir))
                     (lambda (f1 f2)
                       (> (file-modification-time (string-append mdir "/" f1))
                          (file-modification-time (string-append mdir "/" f2))
                          ))))))
          (sort (filter-map string->number (directory ydir)) >))))
     (sort (filter-map string->number (directory bdir)) >))))

(define (display-suffix)
  (display "</div>\n\n<div id=\"footer\"></div>")
  (display "<div id=\"copyright\">Copyright &copy; ")
  (display (+ 1900 (vector-ref (seconds->local-time (current-seconds)) 5)))
  (display " Alex Shinn</div></body>\n</html>\n"))

(define date-rx
  (regexp "^([0-9][0-9][0-9][0-9]/[0-9][0-9]/)(.+)"))

(define (get-sxml dir config wiki-file)
  (let* ((cache-file (pathname-replace-extension wiki-file "cache"))
         (wiki-mtime (file-modification-time wiki-file))
         (cache-mtime (and (file-exists? cache-file)
                           (file-modification-time cache-file))))
    (cond
     ((or (not cache-mtime) (> wiki-mtime cache-mtime))
      (let* ((sxml (wiki-sugar (call-with-input-file wiki-file wiki-parse)
                               dir
                               (conf-multi config 'wiki-aliases)))
             (out (open-output-file cache-file))
             (lock (file-lock out)))
        (with-output-to-port out (lambda () (write sxml)))
        (file-unlock lock)
        (close-output-port out)
        sxml))
     (else
      (call-with-input-file cache-file read)))))

(define (handle path uri headers config)
  (let* ((params (http-parse-form uri headers))
         (word (cond ((assoc "word" params) => cdr) (else #f)))
         (m (string-match date-rx word))
         (title (and m (caddr m)))
         (wdir (conf-get config 'wiki-root "www/docs/wiki/"))
         (base (and m (string-append wdir "/blog/" (cadr m)
                                     (wiki-word-encode (caddr m)))))
         (wiki-file (and base (string-append base ".wiki"))))
    (cond
     ((or (not wiki-file) (not (file-exists? wiki-file)))
      (fprintf (current-error-port) "******* no such file: ~S\n" wiki-file)
      (display-prefix "synthcode blog" #f)
      (display-summary config wdir)
      (display-suffix))
     (else
      (let ((sxml (get-sxml wdir config wiki-file)))
        (display-prefix (html-escape (wiki-word-display title))
                        (file-modification-time wiki-file))
        (wiki-write sxml)
        (display-suffix))))))

