
(use extras)

(define version (call-with-input-file "VERSION" read-line))

;; compute dependencies for other modules in the current directory
;; (define (module-deps mod)
;;   (let* ((path (string-append (symbol->string mod) ".scm"))
;;          (code (read-file path)))
;;     (let deps ((x code) (res '()))
;;       (if (pair? x)
;;           (case (car x)
;;             ((import use require-extension)
;;              )
;;             ((autoload)
;;              )
;;             (else
;;              (module-deps (cdr x) (module-deps (car x) res))))
;;           res))))

(define-syntax compile-module
  (er-macro-transformer
   (lambda (expr rename compare)
     (let* ((module (cadr expr))
            (mod-str (symbol->string module))
            (mod-src (string-append mod-str ".scm"))
            (mod-import (string-append mod-str ".import.scm"))
            (mod-so (string-append mod-str ".so"))
            (mod-import-so (string-append mod-str ".import.so"))
            (_begin (rename 'begin))
            (_make (rename 'make))
            (_compile (rename 'compile))
            (_install-extension (rename 'install-extension)))
       `(,_make ((,mod-so (,mod-src)
                          (,_begin
                           (,_compile -s -O2 -j ,module ,mod-src)
                           (,_compile -s -O2 ,mod-import)
                           (,_install-extension
                            ',module
                            '(,mod-so ,mod-import-so)
                            '((version ,version)))))))))))

(define-syntax compile-executable
  (er-macro-transformer
   (lambda (expr rename compare)
     (let* ((executable (cadr expr))
            (exec-str (symbol->string executable))
            (exec-src (string-append exec-str ".scm"))
            (_begin (rename 'begin))
            (_make (rename 'make))
            (_compile (rename 'compile))
            (_install-program (rename 'install-program)))
       `(,_make ((,exec-str (,exec-src)
                            (,_begin
                             (,_compile -O2 -d2 ,exec-src)
                             (,_install-program
                              ',executable
                              '(,exec-str)
                              '((version ,version)))))))))))

(compile-module dns)
(compile-module let-args)
(compile-module let-keywords)
(compile-module lru-cache)
(compile-module quoted-printable)
(compile-module hato-base64)
(compile-module hato-uri)
(compile-module hato-log)
(compile-module hato-utils)
(compile-module hato-date)
(compile-module hato-mime)
(compile-module hato-archive)
(compile-module hato-db)
(compile-module hato-i3db)
(compile-module hato-config)
(compile-module hato-daemon)
(compile-module hato-imap)
(compile-module hato-md5)
(compile-module domain-keys)
(compile-module hato-pop)
(compile-module hato-nntp)
(compile-module hato-rfc3028)
(compile-module hato-smtp)
(compile-module hato-http)
(compile-module hato-spf)
(compile-module hato-token)
(compile-module hato-prob)
(compile-module hato-filter-env)
(compile-module highlight)
(compile-module html-summary)
(compile-module wiki-utils)
(compile-module wiki-parse)
(compile-module wiki-write)

(compile-executable hato-fetch)
(compile-executable hato-httpd)

